export PATH=~/bin:/usr/local/bin:/usr/local/sbin:/usr/local/share/python:$PATH
export EDITOR=nano
export LC_ALL=en_US.UTF-8

if [ -r /etc/bash_completion ]; then
    . /etc/bash_completion
fi
if [ -r /usr/local/bin/brew ]; then
  if [ -f `brew --prefix`/etc/bash_completion ]; then
    . `brew --prefix`/etc/bash_completion
  fi
fi

function ok_prompt {
local BLUE="\[\033[0;34m\]"
local RED="\[\033[0;31m\]"
local LIGHT_RED="\[\033[1;31m\]"
local WHITE="\[\033[1;37m\]"
local NO_COLOUR="\[\033[0m\]"
local GIT='$(__git_ps1 " (%s)")'
case $TERM in
    xterm*|rxvt*)
        TITLEBAR='\[\033]0;\u@\h:\w\007\]'
        ;;
    *)
        TITLEBAR=""
        ;;
esac

PS1="${TITLEBAR}\
$BLUE[$RED\$(date +%H:%M)$BLUE]\
$BLUE[$LIGHT_RED\u@\h:\w${GIT}$BLUE]\
$WHITE\$$NO_COLOUR "
PS2='> '
PS4='+ '
}

ok_prompt

# Git environment
function parse_git_branch {
    git branch --no-color 2> /dev/null | sed -e '/^[^*]/d' -e 's/* \(.*\)/\1/'
}

function gbin {
    echo branch \($1\) has these commits and \($(parse_git_branch)\) does not
    git log ..$1 --no-merges --format='%h | Author:%an | Date:%ad | %s' --date=local
}

function gbout {
    echo branch \($(parse_git_branch)\) has these commits and \($1\) does not
    git log $1.. --no-merges --format='%h | Author:%an | Date:%ad | %s' --date=local
}

function gbranches {
    for k in `git branch|perl -pe s/^..//`;do echo -e `git show --pretty=format:"%Cgreen%ci %Cblue%cr%Creset" $k|head -n 1`\\t$k;done|sort -r
}

function glatest {
    for k in `git branch -r | perl -pe 's/^..(.*?)( ->.*)?$/\1/'`; do echo -e `git show --pretty=format:"%Cgreen%ci %Cblue%cr%Creset" $k -- | head -n 1`\\t$k; done | sort -r
}

# git checkout `git rev-list -n 1 --before="2009-07-27 13:37" master`

# Set appropriate ls alias
case $(uname -s) in
        Darwin|FreeBSD)
                alias ls="ls -hFG"
        ;;
        Linux)
                alias ls="ls --color=always -hF"
        ;;
        NetBSD|OpenBSD)
                alias ls="ls -hF"
        ;;
esac
alias l="ls"
alias ll="ls -l"
alias la="ls -a"
alias scpresume="rsync --partial --progress --rsh=ssh"
# Mac OSX terminal wrapper around spotify
alias spotify="osascript ~/dot-files/SpotifyControl/SpotifyControl.scpt"


#
export LC_CTYPE=en_US.UTF-8

# Devel environment
#
# Supplies auto completion for ordinary python
export PYTHONSTARTUP=${HOME}/.pythonrc
# Erlang inet config: http://www.erlang.org/doc/apps/erts/inet_cfg.html
export ERL_INETRC=${HOME}/.inetrc

# Powerline paths
export PYTHONPATH=~/.powerline/build/lib/:$PYTHONPATH
export PATH=~/.powerline/build/scripts-2.7:$PATH
LNX_TMUX_POWERLINE=~/.powerline/build/lib.linux-x86_64-2.7/powerline/bindings/tmux/powerline.conf
if [ -f $LNX_TMUX_POWERLINE ]; then
	export TMUX_POWERLINE=$LNX_TMUX_POWERLINE
else
	export TMUX_POWERLINE=~/.powerline/build/lib/powerline/bindings/tmux/powerline.conf
fi

# Some dirs to scrape for source files for my etags file. Override these in the $EXTRA bashrc file.
export JAVA_DIRS=""
export PYTHON_DIRS=""
export ERLANG_DIRS=""
EXTRA=~/.extra.bashrc
if [ -e $EXTRA ]
then
  source $EXTRA
fi
