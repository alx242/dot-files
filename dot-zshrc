# -*- mode: sh -*-
export PATH=~/bin:~/.local/bin:/usr/local/bin:/usr/local/sbin:$PATH
# export LC_ALL=en_US.UTF-8
export TMPDIR=/tmp
export EDITOR=emacs

# Prompt flipping...
#PROMPT='%F{blue}%1~%f %# '
PROMPT='%(?.%F{green}âˆš.%F{red}?%?)%f %B[%m]%F{240} %1~%f%b $> '

# Make zsh only walk one word at a time for alt/ctrl-left/right
bindkey "^[[1;3C" forward-word
bindkey "^[[1;3D" backward-word
bindkey "^[[1;5C" forward-word
bindkey "^[[1;5D" backward-word

autoload -Uz vcs_info
precmd_vcs_info() { vcs_info }
precmd_functions+=( precmd_vcs_info )
setopt prompt_subst
RPROMPT=\$vcs_info_msg_0_
zstyle ':vcs_info:git:*' formats '%F{240}(%b)%r%f'
zstyle ':vcs_info:*' enable git

# Git environment
function parse_git_branch {
    git branch --no-color 2> /dev/null | sed -e '/^[^*]/d' -e 's/* \(.*\)/\1/'
}

function git-branch-in {
    echo branch \($1\) has these commits and \($(parse_git_branch)\) does not
    git log ..$1 --no-merges --format='%h | Author:%an | Date:%ad | %s' --date=local
}

function git-branch-out {
    echo branch \($(parse_git_branch)\) has these commits and \($1\) does not
    git log $1.. --no-merges --format='%h | Author:%an | Date:%ad | %s' --date=local
}

function git-branches {
    for k in `git branch|perl -pe s/^..//`;do echo -e `git show --pretty=format:"%Cgreen%ci %Cblue%cr%Creset" $k|head -n 1`\\t$k;done|sort -r
}

function git-latest {
    for k in `git branch -r | perl -pe 's/^..(.*?)( ->.*)?$/\1/'`; do echo -e `git show --pretty=format:"%Cgreen%ci %Cblue%cr%Creset" $k -- | head -n 1`\\t$k; done | sort -r
}

function git-svn-pull {
    DID_STASH="`git stash`"
    git pull
    git svn rebase
    if [ "${DID_STASH}" != "No local changes to save" ]; then
        git stash pop -q
    fi
}

# Repeat a command (including all params) until a error happens
# (return code =/= 0)
function repeat_until_error {
    while $@; do :; done
}

# Do a diff in emacs with file A and B
function diff_emacs {
    emacs --eval "(ediff-files \"$1\" \"$2\")"
}

# Function to see how a specific proc is behaving, limit line length
# to 80 chars
#
# Columns: CPU, PID, USER, ARGS
function top_proc {
    # Default to looking for the erlang beam
    PROC=${1:-beam.smp}
    watch -n 2 "ps -eo pcpu,pmem,pid,user,args | sort -t. -nk1,2 -k4,4 -r | grep ${PROC} | grep -v grep | grep -v \"pcpu,pmem\" |cut -c 1-80"
}

function weather {
    LOCATION=${1:-stockholm}
    curl http://wttr.in/${LOCATION}
}

function convert_m4a_to_mp3 {
    find . -name '*.m4a' -print0 | while read -d '' -r file; do
        ffmpeg -i "$file" -n -codec:a libmp3lame -qscale:a 2 "${file%.m4a}.mp3" < /dev/null
    done
}
# git checkout `git rev-list -n 1 --before="2009-07-27 13:37" master`

# Machine specifics
case $(uname -s) in
    Darwin|FreeBSD)
        autoload -Uz compinit
        compinit
        fpath=(/usr/local/share/zsh-completions $fpath)
        export PATH="/usr/local/opt/python@3.8/bin:$PATH"
        export LDFLAGS="-L/usr/local/opt/python@3.8/lib"
        alias ls="ls -hFG"
        ;;
    Linux)
        fpath=(/etc/zsh-completions $fpath)
        alias ls="ls --color=always -hF"
        ;;
    NetBSD|OpenBSD)
        alias ls="ls -hF"
        ;;
esac
alias l="ls"
alias ll="ls -l"
alias la="ls -a"
alias big_dirs="du -hd1 . 2>/dev/null | grep '[0-9]G\>'"
alias above_80="grep -n '^.\{81\}'"
alias scpresume="rsync --append-verify --progress --rsh=ssh"
alias process_port="lsof -n -P -i +c 13"
alias bluetooth_list_cards="pacmd list-cards"
alias bluetooth_good_audio="pacmd set-card-profile 2 a2dp_sink"
alias tail_f="journalctl -f"
alias nvidiarun="__NV_PRIME_RENDER_OFFLOAD=1 __GLX_VENDOR_LIBRARY_NAME=nvidia $@"

#
export LC_CTYPE=en_US.UTF-8

# Devel environment
#
# Supplies auto completion for ordinary python
export PYTHONSTARTUP=${HOME}/.pythonrc

# Erlang inet config:
# http://www.erlang.org/doc/apps/erts/inet_cfg.html
export ERL_INETRC=${HOME}/.inetrc
# Turn on debug info by default in all erlang applications.
export ERL_COMPILER_OPTIONS=[debug_info]

# Some dirs to scrape for source files for my etags file. Override
# these in the $EXTRA bashrc file.
export JAVA_DIRS=""
export PYTHON_DIRS=""
export ERLANG_DIRS=""
EXTRA=${HOME}/.extra.bashrc
if [ -e $EXTRA ]
then
  source $EXTRA
fi
