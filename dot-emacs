;; Reload .emacs just do M-x load-file press return twice if it is
;; the current buffer or just open the correct file...
;;
;; Some default info
;;
;; Describe function: C-h f <function>
;;          variable: C-h v <variable>
;;          keybind:  C-h k <press a key>
;;
;; Text scale adjusting
;; Increase: C-x C-+
;; Decrease: C-x C--
;; Reset:    C-x C-0

;; Turn of c-wheel scrolling. It is to fast and unprecise
(global-unset-key (kbd "<C-wheel-up>"))
(global-unset-key (kbd "<C-wheel-down>"))
;; (global-set-key (kbd "<C-wheel-up>") 'tab-bar-switch-to-next-tab)
;; (global-set-key (kbd "<C-wheel-down>") 'tab-bar-switch-to-prev-tab)


;; Auto-save scratch buffer
(use-package persistent-scratch
  :ensure t
  :config
  (persistent-scratch-autosave-mode 1)
  (persistent-scratch-setup-default)
  )

;; Force height of compilation window
(setq compilation-window-height 15)

;; Always for a new window for compilation
;; (defun my-compilation-display-buffer (buffer alist)
;;   "Always display compilation buffer in a new window."
;;   (let ((window (split-window-below)))
;;     (set-window-buffer window buffer)
;;     window))

;; Totally replace my compilation buffer. Makes sure we are not generating
;; duplicate compilations windows.
(add-to-list 'display-buffer-alist
             '("\\*compilation\\*" 
               (display-buffer-reuse-window display-buffer-below-selected)
               (window-height . 15)))

;; Auto-close compilation window in case compilation is successful (slight delay)
(defun compile-notify-and-close (buffer string)
  "Show notification and auto-close compilation window on success."
  (let ((buffer-name (buffer-name buffer)))
    ;; Bara för riktiga compilation-buffers
    (when (string-equal buffer-name "*compilation*")
      (if (string-match "^finished" string)
          (progn
            (message "Compilation successful!")
            (run-with-timer 1.5 nil
                            (lambda (buf)
                              (let ((win (get-buffer-window buf)))
                                (when win (delete-window win))))
                            buffer))
        (message "Compilation failed - check *compilation* buffer")))))

(add-hook 'compilation-finish-functions 'compile-notify-and-close)

;; Access to homebrew commands
(use-package exec-path-from-shell
  :ensure t)

(when (memq window-system '(mac ns x))
  (exec-path-from-shell-initialize))

;; * * * Load emacs stuff * * *
(add-to-list 'load-path "~/.emacs.d/lisp")

(setq mac-allow-anti-aliasing nil)
(setq mac-right-option-modifier nil)
(setq mac-command-modifier 'super)
(setq mac-option-modifier 'meta)
(setq x-select-enable-clipboard t)

;; NOTE: So the precision scrolling didn't play nicely with vterm and
;; pageup/down
;;
;; Scroll with precision (works for ordinary emacs+30
(pixel-scroll-precision-mode nil)

;; Want to run as a server
(server-start)

;; save desktop to enable getting back in to action ö_Ö
(desktop-save-mode 1)

;; Set fill-column to 80 for all files
(setq-default fill-column 80)

;; Package handling
(require 'package)
(add-to-list 'package-archives
             '("elpa" . "http://elpa.gnu.org/packages/") t)
(add-to-list 'package-archives
             '("melpa" . "https://melpa.org/packages/") t)

;; ;; regex re-builder
;; (require 're-builder)
;; (setq reb-re-syntax 'string)

(use-package markdown-mode
  :ensure t
  :mode ("README\\.md\\'" . gfm-mode)
  :init (setq markdown-command "multimarkdown")
  :bind (:map markdown-mode-map
         ("C-c C-e" . markdown-do)))

(use-package magit
    :ensure t)
(require 'magit)

;; Dim unfocused buffers

(use-package auto-dim-other-buffers
    :ensure t)

(auto-dim-other-buffers-mode t)

;; Terminal
(use-package vterm
    :ensure t)

(use-package multi-vterm
    :bind (:map global-map
                ("C-c t" . new-multi-vterm)
                ("C-c n" . multi-vterm-next)
                ("C-c p" . multi-vterm-prev)
                )
    :bind (:map vterm-mode-map
                ("M-c" . vterm-copy-mode)
                ("s-k" . vterm-clear-kill-history)
                ("C-y" . vterm-send-C-y)
                ("<deletechar>" . vterm-send-C-d)
                ("M-<left>" . 'vterm-send-M-b)
                ("M-<right>" . 'vterm-send-M-f)
                )
    :bind (:map vterm-copy-mode-map
                ("M-c" . vterm-copy-mode)
                ("C-g" . vterm-copy-mode)
                ("s-k" . vterm-clear-kill-history)
                )
    :config
    (add-hook 'after-init-hook (define-key vterm-mode-map [double-mouse-1] #'mark-word))

    ;; Smaller scrollback is faster
    (setq vterm-max-scrollback 10000)
    (setq vterm-kill-buffer-on-exit t)
    (pixel-scroll-precision-mode nil)

    ;; Needs the add-zsh-hook chpwd in .zshrc
    (setq vterm-buffer-name-string "vterm %s")

    ;; Faster refresh
    (setq vterm-timer-delay 0.005)

    ;; Make sure to get latest compilation :)
    (setq vterm-always-compile-module t)

    ;; Enable vterm cut/paste to macos buffer
    ;; (setq vterm-enable-manipulate-selection-data-by-osc52 t)
    ;; (setq show-trailing-whitespace 0)
    :ensure t)

;; Any selection when using vterm is copied to the kill-ring
(add-hook 'vterm-mode-hook
          (lambda ()
            (pixel-scroll-precision-mode 0)
            (setq-local mouse-drag-copy-region t)))

(defun new-multi-vterm ()
   (interactive)
   (let ((default-directory "~"))
     (multi-vterm))
   )

(defun vterm-clear-kill-history ()
   (interactive)
   (vterm-clear-scrollback)
   (vterm-clear)
   )

(require 'markdown-mode)

(use-package request
    :ensure t)

(require 'request)

(setq tags-revert-without-query 1)

;; Force confirmation before exit of emacs
(setq confirm-kill-emacs 'y-or-n-p)

;; Tab bar
(define-key magit-mode-map (kbd "C-c C-t") nil) ; unbind in magit first
(global-set-key (kbd "C-c C-b") 'tab-bar-mode)
(global-set-key (kbd "s-t") 'tab-bar-new-tab)
(global-set-key (kbd "s-w") 'tab-bar-close-tab)
(define-key magit-mode-map (kbd "C-<tab>") nil) ; unbind in magit first
(global-set-key (kbd "C-<tab>") 'tab-bar-switch-to-next-tab)
(global-set-key (kbd "C-S-<tab>") 'tab-bar-switch-to-prev-tab)
(define-key magit-mode-map (kbd "C-x C-t") nil) ; unbind switch rows

;; * * * Moving around window-buffers * * *

;; (global-set-key (kbd "C-t") 'customize-face)
;; (global-set-key (kbd "C-t") 'customize-themes)
(global-set-key (kbd "C-f") 'menu-set-font)
(windmove-default-keybindings 'super)
(global-set-key (kbd "M-o") 'other-window)
(global-set-key (kbd "M-i") 'previous-window-any-frame)

;; Swap windows meta+super+arrow
(global-set-key (kbd "M-s-<left>")  'windmove-swap-states-left)
(global-set-key (kbd "M-s-<right>") 'windmove-swap-states-right)
(global-set-key (kbd "M-s-<up>")    'windmove-swap-states-up)
(global-set-key (kbd "M-s-<down>")  'windmove-swap-states-down)

;; Resize windows ctrl+super-arrow
(global-set-key (kbd "C-s-<left>") 'shrink-window-horizontally)
(global-set-key (kbd "C-s-<right>") 'enlarge-window-horizontally)
(global-set-key (kbd "C-s-<down>") 'shrink-window)
(global-set-key (kbd "C-s-<up>") 'enlarge-window)

;; (global-set-key (kbd "s-0") 'delete-window)
;; (global-set-key (kbd "s-1") 'delete-other-windows)
;; (global-set-key (kbd "s-2") 'split-window-below)
;; (global-set-key (kbd "s-3") 'split-window-right)

(global-set-key (kbd "s-1") (lambda () (interactive) (tab-bar-select-tab 1)))
(global-set-key (kbd "s-2") (lambda () (interactive) (tab-bar-select-tab 2)))
(global-set-key (kbd "s-3") (lambda () (interactive) (tab-bar-select-tab 3)))
(global-set-key (kbd "s-4") (lambda () (interactive) (tab-bar-select-tab 4)))
(global-set-key (kbd "s-5") (lambda () (interactive) (tab-bar-select-tab 5)))
(global-set-key (kbd "s-6") (lambda () (interactive) (tab-bar-select-tab 6)))

(use-package transpose-frame
   :ensure t)

(require 'transpose-frame)
(global-set-key (kbd "s-k") 'kill-buffer)
(global-set-key (kbd "s-b") 'switch-to-buffer)
(global-set-key (kbd "s-.") 'maximize-window)
(global-set-key (kbd "s-,") 'balance-windows)
(global-set-key (kbd "s-r") 'rotate-frame-clockwise)

;; when cursor is on edge, move to the other side, as in a toroidal
;; space
(setq windmove-wrap-around t)

(global-set-key (kbd "S-C-<left>") 'shrink-window-horizontally)
(global-set-key (kbd "S-C-<right>") 'enlarge-window-horizontally)
(global-set-key (kbd "S-C-<down>") 'shrink-window)
(global-set-key (kbd "S-C-<up>") 'enlarge-window)

;; * * * General variables * * *
;; No tabs only spaces
(setq indent-tabs-mode nil)
(setq-default indent-tabs-mode nil)
(setq-default show-trailing-whitespace nil)
(setq-default default-indicate-empty-lines t)
(setq-default line-number-mode t)
(setq-default column-number-mode t)
(setq vc-follow-symlinks t) ; Auto follow symlinks

(setq max-lisp-eval-depth 600)

;; * * * Interactively Do Things * * *
(require 'ido)
(ido-mode t)

;; Nice vertical selector using M-x
(use-package vertico
    :ensure t)
(vertico-mode)

;; * * * Encrypted files * * *
(require 'ps-ccrypt)

;; * * * Markdown * * *
;; (load "~/.emacs.d/markdown-mode/markdown-mode.el")
(add-to-list 'auto-mode-alist '("README$" . markdown-mode))
(add-to-list 'auto-mode-alist '("\\.mdp$" . markdown-mode))

(add-hook 'markdown-mode-hook
          (lambda () (flyspell-mode 1)))

;; * * * Yang * * *
(use-package yang-mode
    :ensure t)
(autoload 'yang-mode "yang-mode"
  "Major mode for editing YANG modules." t)
(add-to-list 'auto-mode-alist '("\\.yang$" . yang-mode))

;; To not make emacs laggy when viewing big yang-files
(setq-default blink-matching-paren-distance nil)

;; * * * LuX * * *
(use-package lux-mode
    :ensure t
    :config
    (setq show-trailing-whitespace t)
    )
(add-to-list 'auto-mode-alist '("\\.lux$" . lux-mode))

;; * * * 80 colums * * *
(require 'column-marker)

;; * * * Erlang * * *
;; Try and get a working erlang environment
(setenv "ERL_COMPILER_OPTIONS" "[debug_info]")
(setenv "ERL_NO_FAIL_ON_WARNING" "true")

;; Testing lsp

;; Access elp command
(add-to-list 'exec-path "~/.emacs.d/")
(global-unset-key (kbd "C-c C-d"))

;; LLM done right
(use-package gptel
    :ensure t
    :bind (:map global-map
                ("C-c g" . gptel)
                ("C-c f" . gptel-add)
                ("C-c d" . gptel-rewrite))
    :bind (:map gptel-mode-map
                ("C-c C-c" . gptel-send))
    :config
    (setq gptel-model 'claude-sonnet-4.5)
    (setq gptel-use-curl t)
    ;; Auto-scroll to the end of the file when gptel responds
    (setq gptel-post-response-functions (list (lambda (start end)
                                                (goto-char end)
                                                (recenter -3))))
    ;; Remove meta-data at end of saved chat file
    (setq enable-local-variables nil)
    (setq gptel-backend (gptel-make-gh-copilot "Copilot"))
    )
(require 'gptel)

(defun magit-generate-commit-msg ()
  "Generate a commit message from staged changes using AI."
  (interactive)
  (let ((diff (shell-command-to-string "git diff --cached")))
    (if (string-empty-p diff)
        (user-error "No diff content found in staged changes")
        (gptel-request
            (format "Generate a concise git commit message for these changes:\n%s" diff)
          :callback (lambda (response _)
                      (with-current-buffer "COMMIT_EDITMSG"
                        ;; (erase-buffer) Not sure about this :P
                        (insert response)))
          :system "You are a helpful assistant that generates concise, conventional git commit messages."))))

(use-package flycheck
  :ensure t
  ;; :config
  ;; (add-hook 'after-init-hook #'global-flycheck-mode)
  )

(use-package erlang
    :ensure t)

(use-package lsp-mode
    :ensure t
    :config
    ;; Enable LSP automatically for Erlang files
    ;; (add-hook 'erlang-mode-hook #'lsp)
    :hook ((erlang-mode     ; erlang
            c-mode          ; clangd
            c++-mode        ; clangd
            c-or-c++-mode   ; clangd
            java-mode       ; eclipse-jdtls
            js-mode         ; ts-ls (tsserver wrapper)
            js-jsx-mode     ; ts-ls (tsserver wrapper)
            typescript-mode ; ts-ls (tsserver wrapper)
            python-mode     ; pyright
            web-mode        ; ts-ls/HTML/CSS
            haskell-mode    ; haskell-language-server
            ) . lsp-deferred)
    ;; Make lsp a bit more lightweight
    :config
    (setq lsp-auto-guess-root t)
    (setq lsp-log-io nil)
    (setq lsp-restart 'auto-restart)
    (setq lsp-enable-symbol-highlighting nil)
    (setq lsp-enable-on-type-formatting nil)
    (setq lsp-signature-auto-activate nil)
    (setq lsp-signature-render-documentation nil)
    (setq lsp-eldoc-hook nil)
    (setq lsp-modeline-code-actions-enable nil)
    (setq lsp-modeline-diagnostics-enable nil)
    (setq lsp-headerline-breadcrumb-enable nil)
    (setq lsp-semantic-tokens-enable nil)
    (setq lsp-enable-folding nil)
    (setq lsp-enable-imenu nil)
    (setq lsp-enable-snippet nil)
    (setq read-process-output-max (* 1024 1024)) ;; 1MB
    (setq lsp-idle-delay 0.5)
    ;; Bigger files
    (setq lsp-file-watch-threshold 25000)
    ;; ELP, added as priority 0 (> -1) so takes priority over the
    ;; built-in one
    (lsp-register-client
     (make-lsp-client :new-connection (lsp-stdio-connection
                                       '("elp" "server"))
                      :major-modes '(erlang-mode)
                      :priority 0
                      :server-id 'erlang-language-platform))
    )

;; More
(use-package ispell
    :ensure t)

(use-package consult
    :ensure t
    :config
    ;; Use Consult to select xref locations with preview
    (setq xref-show-xrefs-function #'consult-xref
          xref-show-definitions-function #'consult-xref)
    )

;; Ripgrep package
(use-package rg
  :ensure t
  )

(defun consult-ripgrep-erl ()
  "Search for erlang files"
  (interactive)
  (let ((consult-ripgrep-command
         "rg --null --line-buffered --color=ansi --max-columns=1000
             --no-heading --type erlang --type c
             --line-number . -e ARG OPTS"))
    (consult-ripgrep)))

(define-key magit-mode-map (kbd "C-x C-r") nil)
(global-set-key (kbd "C-x C-r") 'consult-ripgrep-erl)
(global-set-key (kbd "C-c C-r") 'rg)

(defun my-erlang-mode-hook ()
  "Configuration for Erlang Mode. Add this to `erlang-mode-hook'."
  (setq indent-tabs-mode nil)
  ;; lsp-mode - done via use-package
  ;; (lsp-mode)
  ;; Activate the co-pilot
  (flyspell-prog-mode)
  ;; Enable auto-fill mode for text files
  (turn-on-auto-fill)
  ;; Expose whitespaces
  (setq show-trailing-whitespace t)
  ;; (flyspell-mode)
  ;; 80 chars
  (display-fill-column-indicator-mode)
  )

(add-hook 'erlang-mode-hook 'my-erlang-mode-hook)

(add-to-list 'auto-mode-alist '("rebar\\.config$" . erlang-mode))
(add-to-list 'auto-mode-alist '("relx\\.config$" . erlang-mode))
(add-to-list 'auto-mode-alist '("system\\.config$" . erlang-mode))
(add-to-list 'auto-mode-alist '("\\.app\\.src$" . erlang-mode))

(setq load-path (cons  "~/.emacs.d/emacs" load-path))

;; * * * XML * * *
(defun pretty-print-xml-region (begin end)
  "Pretty format XML markup in region. You need to have nxml-mode
http://www.emacswiki.org/cgi-bin/wiki/NxmlMode installed to do
this.  The function inserts linebreaks to separate tags that have
nothing but whitespace between them.  It then indents the markup
by using nxml's indentation rules."
  (interactive "r")
  (save-excursion
    (nxml-mode)
    (goto-char begin)
    (while (search-forward-regexp "\>[ \\t]*\<" nil t)
      (backward-char) (insert "\n"))
    (indent-region begin end))
  (message "Ah, much better!"))

;; * * * (e)Lisp * * *
(add-to-list 'auto-mode-alist '("\\.emacs$" . lisp-mode))
(add-to-list 'auto-mode-alist '("dot-emacs$" . lisp-mode))

;; * * * Rst * * *
(add-to-list 'auto-mode-alist '("\\.rst$" . rst-mode))

;; * * * Internal functions * * *
;; Auto-complete using open buffers
(defun indent-or-complete ()
  "Complete if point is at end of a word, otherwise indent line."
  (interactive)
  (if (looking-at "\\>")
      (dabbrev-expand nil)
      (indent-for-tab-command)))
(global-set-key (kbd "TAB") 'indent-or-complete)

;; Insert a timestamp at the end of a file (diary stuff)
(defun insert-date-stamp ()
  "Insert current date at the end of the file position."
  (interactive "*")
  (message "starting to date stamp the line...")
  (setq make-backup-files nil)
  (end-of-buffer)
  (end-of-line)
  (insert (format-time-string "\n\n%a %b %e %R %Z %Y\n\n"
                              (current-time)))
  ;;(forward-char -1)
  ;;(forward-char 1)
  (end-of-buffer)
  (end-of-line)
  (message "starting to date stamp the line - finished.")
  )

;; Kill all buffers
(defun kill-all-buffers ()
  "Kill all buffers in emacs...wooops"
  (interactive)
  (mapcar 'kill-buffer (buffer-list))
  (delete-other-windows))

(global-set-key (kbd "s-n") 'next-buffer)
(global-set-key (kbd "s-p") 'previous-buffer)

;; * * * Keys * * *

;; Word-walk
;;
;; In apple terminal add the ctrl-up and ctrl-down by using \033[1;5A
;; and \033[1;5B (\033 is Meta/Esc) as well as ctrl-left/right. Make
;; sure the standard shortcuts doesn't catch these...
;;

(global-set-key (kbd "M-c") 'compile)
(global-set-key (kbd "M-[ A") 'backward-paragraph) ; Meta+up
(global-set-key (kbd "M-[ B") 'forward-paragraph)  ; Meta+down
(global-set-key (kbd "ESC <up>") 'backward-paragraph) ; Meta+up
(global-set-key (kbd "ESC <down>") 'forward-paragraph)  ; Meta+down
(global-set-key (kbd "M-[ C") 'forward-word)       ; Meta+down
(global-set-key (kbd "M-[ D") 'backward-word)      ; Meta+up

(global-set-key (kbd "M-p") 'backward-paragraph) ; Meta+p
(global-set-key (kbd "M-n") 'forward-paragraph)  ; Meta+n

(global-set-key (kbd "M-<down>") 'forward-paragraph)
(global-set-key (kbd "M-<up>") 'backward-paragraph)
(global-set-key (kbd "M-<left>") 'backward-word)
(global-set-key (kbd "M-<right>") 'forward-word)

(global-set-key (kbd "M-g") 'goto-line)

;; * * * Diff regions * * *
;; Select first region and execute diff-region and then select second
;; region and do diff-region-now
;; (load "~/.emacs.d/lisp/diff_region.el")
;; (global-set-key (kbd "C-c d d") 'diff-region)
;; (global-set-key (kbd "C-c d n") 'diff-region-now)

;; Stop sounding the bell in emacs
(setq ring-bell-function 'ignore)

;; * * * README * * *
;; (find-file "~/README") ; Want to make sure that my README is always available :)

(custom-set-variables
 ;; custom-set-variables was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 '(column-number-mode t)
 '(custom-enabled-themes '(misterioso))
 '(custom-safe-themes
   '("74828a8db9af899ca4301f38dd5ef4ed20266613b29715299ac54e8fde98e2f3"
     "d23adb4d0d0acf5cf4dcdad91e4e70b6c15481bcff4170f28ed2dae90b253d00"
     "b9c3cad81999816c55bad4904db1c955702cac2de1c8042f8c998455134bcdd6"
     "71728ca14d7e788011a6b5f25abd89fd643b2c5eac252f29892a2e5ca2a046f0"
     "09b833239444ac3230f591e35e3c28a4d78f1556b107bafe0eb32b5977204d93"
     "d5fd482fcb0fe42e849caba275a01d4925e422963d1cd165565b31d3f4189c87"
     "75b371fce3c9e6b1482ba10c883e2fb813f2cc1c88be0b8a1099773eb78a7176"
     "51fa6edfd6c8a4defc2681e4c438caf24908854c12ea12a1fbfd4d055a9647a3"
     "5a0ddbd75929d24f5ef34944d78789c6c3421aa943c15218bac791c199fc897d"
     "8363207a952efb78e917230f5a4d3326b2916c63237c1f61d7e5fe07def8d378"
     "5aedf993c7220cbbe66a410334239521d8ba91e1815f6ebde59cecc2355d7757"
     "18a1d83b4e16993189749494d75e6adb0e15452c80c431aca4a867bcc8890ca9"
     "4d54e300a780189e56fe605bf81828a3917aae3f0fef64772b0f9fa0fb34635e"
     "fa10e8ac20bda83daa98777ad934854f4aa87a31587f855e559171e779034556"
     "9fb69436c074b82a62b78b8d733e6274d0bd16d156f7b094e2afe4345c040c49"
     "b33955472cb61a721c59c705afda11fea906756d38b3c2eba61698f4e3f82897"
     "51ec7bfa54adf5fff5d466248ea6431097f5a18224788d0bd7eb1257a4f7b773"
     "36d4b9573ed57b3c53261cb517eef2353058b7cf95b957f691f5ad066933ae84"
     "b49f66a2e1724db880692485a5d5bcb9baf28ed2a3a05c7a799fa091f24321da"
     "285d1bf306091644fb49993341e0ad8bafe57130d9981b680c1dbd974475c5c7"
     "830877f4aab227556548dc0a28bf395d0abe0e3a0ab95455731c9ea5ab5fe4e1"
     "7f1d414afda803f3244c6fb4c2c64bea44dac040ed3731ec9d75275b9e831fe5"
     "7fea145741b3ca719ae45e6533ad1f49b2a43bf199d9afaee5b6135fd9e6f9b8"
     "efcecf09905ff85a7c80025551c657299a4d18c5fcfedd3b2f2b6287e4edd659"
     "57a29645c35ae5ce1660d5987d3da5869b048477a7801ce7ab57bfb25ce12d3e"
     "833ddce3314a4e28411edf3c6efde468f6f2616fc31e17a62587d6a9255f4633"
     "d89e15a34261019eec9072575d8a924185c27d3da64899905f8548cbd9491a36"
     "2b0fcc7cc9be4c09ec5c75405260a85e41691abb1ee28d29fcd5521e4fca575b"
     "00445e6f15d31e9afaa23ed0d765850e9cd5e929be5e8e63b114a3346236c44c"
     "5a4cdc4365122d1a17a7ad93b6e3370ffe95db87ed17a38a94713f6ffe0d8ceb"
     "a951814eee8d4a0c3f92ddc6016c6fe86e1af7e94db52f1daa90772f418ec460"
     "ee0785c299c1d228ed30cf278aab82cf1fa05a2dc122e425044e758203f097d2"
     "b5b6396361db4bee9b0c0d7ea678b96b3b55e4217c610038c8d289eb05c426ef"
     "aa742450bc84284415b398be20bfe1c7e63b58fbbc4beb4f2709ce08f2ca3c92"
     "7c7026a406042e060bce2b56c77d715c3a4e608c31579d336cb825b09e60e827"
     "ea5a840bd2f9616a36890c27fd5e97528cb9fcfafa0e6739315bb12786d6c4ee"
     "f5a7e07642decb17b03483af7c44e93353d2b128de403bf301651954c628c0ab"
     "e7ce09ff7426c9a290d06531edc4934dd05d9ea29713f9aabff834217dbb08e4"
     "e28246005845509308f992e6fa8524249e13b65192572c9cc9f412a4c5150373"
     "d6e59d5d3e1e4ec825322deed1e154251abecff0b2bb6d32ac62b117f623bd50"
     "125744c0b04c7addbe25d238a4053740fad2ad5e18211662f637dbacb3802331"
     "15a4c95b442e6e7ef3b4e17f792f3c5b2a96e3f64589ae280dad648d97a64e5a"
     "1d609285d297920b97b0d230360a8d7c3f930edcf1abe96a1d82356f9a5e228d"
     "46f5e010e0118cc5aaea1749cc6a15be4dfce27c0a195a0dff40684e2381cf87"
     "00b463c48742afe509ae7d1dcfce09471f7203e13a118f1256b208017a978b4e"
     "d1cbc62377e87ed73d97af40bf2bff23033bb29c44cc9f15ecbbcbb53fc88095"
     "e1befaab4edb07028d6502c8feff0fbfc4c90c8f192d00ca6732f7fc0e80d119"
     "b5dd9b010ba8ac35e18f25be917f1e2dfa5f391784e54848a8853ae000996337"
     "1a10896643cce14633f9e2b9f3727761cc528ee7bbbe7e8efeb442e067da1a96"
     "0d09f49e81c811f4a661ff63b82d2b812ce034aed336903922b06362b8cb0bbe"
     "3d4df186126c347e002c8366d32016948068d2e9198c496093a96775cc3b3eaa"
     "919fabfc5cb6165ce07b9d8668f78fe75fe8bd08566006bc87513c29b4f34ade"
     "c0f4b66aa26aa3fded1cbefe50184a08f5132756523b640f68f3e54fd5f584bd"
     "957a573d5c7cb49c2f033b9d5a6f77445c782307e2d7ffca0d9b5b8141c49843"
     "9b4ae6aa7581d529e20e5e503208316c5ef4c7005be49fdb06e5d07160b67adc"
     "edf6b2f1ff26f0cb155523bd4b83a82f1f19a42c9c77fcec0ebbc796d8931180"
     "83e0376b5df8d6a3fbdfffb9fb0e8cf41a11799d9471293a810deb7586c131e6"
     "6bdcff29f32f85a2d99f48377d6bfa362768e86189656f63adbf715ac5c1340b"
     "78c4238956c3000f977300c8a079a3a8a8d4d9fee2e68bad91123b58a4aa8588"
     "7661b762556018a44a29477b84757994d8386d6edee909409fabe0631952dad9"
     "6b5c518d1c250a8ce17463b7e435e9e20faa84f3f7defba8b579d4f5925f60c1"
     "d14f3df28603e9517eb8fb7518b662d653b25b26e83bd8e129acea042b774298"
     "0ed3d96a506b89c1029a1ed904b11b5adcebeb2e0c16098c99c0ad95cb124729"
     "b6c43bb2aea78890cf6bd4a970e6e0277d2daf0075272817ea8bb53f9c6a7f0a"
     "91c008faf603a28d026957120a5a924a3c8fff0e12331abf5e04c0e9dd310c65"
     "bffa9739ce0752a37d9b1eee78fc00ba159748f50dc328af4be661484848e476"
     "fa2b58bb98b62c3b8cf3b6f02f058ef7827a8e497125de0254f56e373abee088"
     "68bda5909fa46ce2fa510108d4abfafb75671f721dcad05211d3f78fec8a918a"
     "d677ef584c6dfc0697901a44b885cc18e206f05114c8a3b7fde674fce6180879"
     "8aebf25556399b58091e533e455dd50a6a9cba958cc4ebb0aab175863c25b9a4"
     "e16a771a13a202ee6e276d06098bc77f008b73bbac4d526f160faa2d76c1dd0e"
     "4eb6fa2ee436e943b168a0cd8eab11afc0752aebb5d974bba2b2ddc8910fca8f"
     "117efd35bd4451a2d4ee0180cb2dbfc8601af5c4d9ade3ea575d2afdda0feb82"
     "81c3de64d684e23455236abde277cda4b66509ef2c28f66e059aa925b8b12534"
     "5a27cbf4736a5f9be00c35f4961efd29ea72f7e959f856e0ab31051547ce4f29"
     "b89a4f5916c29a235d0600ad5a0849b1c50fab16c2c518e1d98f0412367e7f97" default))
 '(debug-on-error t)
 '(menu-bar-mode t)
 '(package-selected-packages
   '(auto-dim-other-buffers consult erlang exec-path-from-shell flycheck lsp-mode
                            nord-theme nordic-night-theme transpose-frame
                            vertico yang-mode))
 '(safe-local-variable-values '((allout-layout . t) (sh-indent-comment . t)))
 '(scroll-bar-mode nil)
 '(tab-bar-mode t)
 '(tab-bar-show 1)
 '(vterm-environment '("TERM_PROGRAM=Apple_Terminal")))

;; (set-mouse-color "white")

(setq my_font "unscii-16:antialias=false:hinting=true:autohint=false")
(set-face-attribute 'default nil :font my_font)
(set-face-attribute 'fixed-pitch nil :font my_font)
(set-face-attribute 'variable-pitch nil :font my_font)
;(set-face-attribute 'tab-bar nil :font my_font)
(set-face-attribute 'tab-bar nil
                    :background "#3b4252")  ; background

(set-face-attribute 'tab-bar-tab nil
                    :background "#5e81ac"   ; active tab
                    :foreground "#eceff4")

(set-face-attribute 'tab-bar-tab-inactive nil
                    :background "#4c566a"   ; inactive tabs
                    :foreground "#d8dee9")
(set-face-attribute 'help-key-binding nil :font my_font)
(set-face-attribute 'help-for-help-header nil :font my_font)
(set-face-attribute 'fixed-pitch-serif nil :font my_font)
(set-face-background 'trailing-whitespace "red")
(custom-set-faces
 ;; custom-set-faces was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 '(auto-dim-other-buffers ((t nil)))
 '(markdown-header-face-1 ((t (:background "#F0F0F0" :foreground "#3C3C3C" :overline "#A7A7A7" :weight bold :height 1.0))))
 '(org-level-1 ((t (:inherit variable-pitch :foreground "#d04a00" :height 1.0))))
 '(org-level-2 ((t (:inherit variable-pitch :foreground "#1d9700" :height 1.0))))
 '(org-level-3 ((t (:inherit variable-pitch :extend nil :foreground "#0064e4" :height 1.0)))))
