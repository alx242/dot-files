;; * * * TAGS * * *

;; Added by Package.el.  This must come before configurations of
;; installed packages.  Don't delete this line.  If you don't want it,
;; just comment it out by adding a semicolon to the start of the line.
;; You may delete these explanatory comments.
(package-initialize)

(defun generate-etags ()
  (interactive)
  ;; Erlang
  (shell-command "etags --language=erlang \
 -o ${ERL_TOP}/../TAGS \
 `find ${ERL_TOP}/../lib -iregex '.*.erl$' -o -iregex '.*hrl$' | grep -v '\.eunit'`")

  ;; Python
  ;; (shell-command "etags -a --language=python
  ;; -o ${PYTHON_DIRS}/TAGS `find ${PYTHON_DIRS} | grep -E '(\.py)$'`")
  nil
  )

;; Make sure the TAGS are loaded
;; (if (file-exists-p "~/TAGS") (visit-tags-table "~/TAGS"))
(setq tags-revert-without-query 1)

;; * * * Load emacs stuff * * *
(add-to-list 'load-path "~/.emacs.d/lisp")

;; Package handling
(add-to-list 'package-archives '("elpa" . "http://elpa.gnu.org/packages/"))
(add-to-list 'package-archives '("melpa" . "http://melpa.milkbox.net/packages/"))
(add-to-list 'package-archives '("marmalade" . "http://marmalade-repo.org/packages/"))

;; * * * Moving around window-buffers * * *
;; Non-default binding which doesn't screw up that much...
(global-set-key (kbd "C-x <right>") 'windmove-right)
(global-set-key (kbd "C-x <left>") 'windmove-left)
(global-set-key (kbd "C-x <up>") 'windmove-up)
(global-set-key (kbd "C-x <down>") 'windmove-down)
;; when cursor is on edge, move to the other side, as in a toroidal space
(setq windmove-wrap-around t)

;; * * * General variables * * *
;; No tabs only spaces
(setq indent-tabs-mode nil)
(setq-default indent-tabs-mode nil)
(setq-default show-trailing-whitespace t)
(setq-default default-indicate-empty-lines t)
(setq-default line-number-mode t)
(setq-default column-number-mode t)
(setq vc-follow-symlinks t) ; Auto follow symlinks

;; * * * Interactively Do Things * * *
(require 'ido)
(ido-mode t)

;; * * * Encrypted files * * *
(require 'ps-ccrypt)

;; * * * Magit - git handler * * *
;; Use package-installer magit, to exit from magit-blame just press q
(global-set-key "\M-m" 'magit-blame)

;; * * * Yang * * *
(autoload 'yang-mode "yang-mode" "Major mode for editing YANG modules." t)
(add-to-list 'auto-mode-alist '("\\.yang$" . yang-mode))

;; * * * LuX * * *
(require 'lux-mode)

;; * * * 80 colums * * *
(require 'column-marker)

;; * * * Erlang * * *
;(setq erlang-root-dir (getenv "ERL_TOP"))
;(setq exec-path (cons (concat (getenv "ERL_TOP") "/installed/bin") exec-path))
(setq load-path (cons  "~/.emacs.d/emacs" load-path))

;; package-install edts
;; (add-hook 'after-init-hook 'da-erlang-init-hook)
;; (defun da-erlang-init-hook ()
;;   (progn (require 'erlang-start)
;;
;;          ;; (require 'edts-start)
;;          ;; (require 'edts-refactor)
;;          )
;;   )
;;

(require 'flycheck)

(flycheck-define-checker erlang-otp
  "An Erlang syntax checker using the Erlang interpreter."
  :command ("erlc" "-o" temporary-directory "-Wall"
            "-I" "../.."
            "-I" "../include"
            "-pz" "../ebin"
            source)
  :modes erlang-mode
  :error-patterns
  ((warning line-start (file-name) ":" line ": Warning:" (message) line-end)
   (error line-start (file-name) ":" line ": " (message) line-end)))

;;          (lambda () (generate-etags))
(add-hook 'erlang-mode-hook
          (lambda ()
            (flycheck-select-checker 'erlang-otp)
            (flycheck-mode)
            (if (file-exists-p (concat (getenv "ERL_TOP") "/../TAGS"))
                (visit-tags-table (concat (getenv "ERL_TOP") "/../TAGS")))
            (column-marker-1 80))
          )

;; * * * XML * * *
(defun pretty-print-xml-region (begin end)
  "Pretty format XML markup in region. You need to have nxml-mode
http://www.emacswiki.org/cgi-bin/wiki/NxmlMode installed to do
this.  The function inserts linebreaks to separate tags that have
nothing but whitespace between them.  It then indents the markup
by using nxml's indentation rules."
  (interactive "r")
  (save-excursion
    (nxml-mode)
    (goto-char begin)
    (while (search-forward-regexp "\>[ \\t]*\<" nil t)
      (backward-char) (insert "\n"))
    (indent-region begin end))
  (message "Ah, much better!"))

;; * * * (e)Lisp * * *
(add-to-list 'auto-mode-alist '("\\.emacs$" . lisp-mode))
(add-to-list 'auto-mode-alist '("dot-emacs$" . lisp-mode))

;; * * * Rst * * *
(add-to-list 'auto-mode-alist '("\\.rst$" . rst-mode))

;; * * * Internal functions * * *
;; Auto-complete using open buffers
(defun indent-or-complete ()
  "Complete if point is at end of a word, otherwise indent line."
  (interactive)
  (if (looking-at "\\>")
      (dabbrev-expand nil)
    (indent-for-tab-command)
    ))
(global-set-key (kbd "TAB") 'indent-or-complete)

;; Close all buffers
(defun kill-all-buffers ()
  (interactive)
  (mapc 'kill-buffer (buffer-list)))

;; Insert a timestamp at the end of a file (diary stuff)
(defun insert-date-stamp ()
  "Insert current date at the end of the file position."
  (interactive "*")
  (message "starting to date stamp the line...")
  (setq make-backup-files         nil)
  (end-of-buffer)
  (end-of-line)
  (insert (format-time-string "\n\n%a %b %e %R %Z %Y\n\n" (current-time)))
  ;;(forward-char -1)
  ;;(forward-char 1)
  (end-of-buffer)
  (end-of-line)
  (message "starting to date stamp the line - finished.")
  )

;; * * * Keys * * *

;; Word-walk
;;
;; In apple terminal add the ctrl-up and ctrl-down by using \033[1;5A
;; and \033[1;5B (\033 is Meta/Esc) as well as ctrl-left/right. Make
;; sure the standard shortcuts doesn't catch these...
;;
(global-set-key (kbd "M-[ A") 'backward-paragraph) ; Meta+up
(global-set-key (kbd "M-[ B") 'forward-paragraph)  ; Meta+down
(global-set-key (kbd "ESC <up>") 'backward-paragraph) ; Meta+up
(global-set-key (kbd "ESC <down>") 'forward-paragraph)  ; Meta+down
(global-set-key (kbd "M-[ C") 'forward-word)       ; Meta+down
(global-set-key (kbd "M-[ D") 'backward-word)      ; Meta+up
(global-set-key (kbd "<M-up>") 'backward-paragraph) ; Meta+up
(global-set-key (kbd "<M-down>") 'forward-paragraph)  ; Meta+down

;; (global-set-key "\M-[1;5A" 'backward-paragraph) ;  Ctrl+up->paragraph up
;; (global-set-key "\M-[1;5B" 'forward-paragraph)  ;  Ctrl+down->paragraph down
;; (global-set-key "\M-[1;5C" 'forward-word)       ;  Ctrl+right->forward word
;; (global-set-key "\M-[1;5D" 'backward-word)      ;  Ctrl+left-> backward word
;; (global-set-key "\M-<up>"    'backward-paragraph) ;  Ctrl+up->paragraph up
;; (global-set-key "\M-<down>"  'forward-paragraph)  ;  Ctrl+down->paragraph down
;; (global-set-key "\M-<right>" 'forward-word)       ;  Ctrl+right->forward word
;; (global-set-key "\M-<left>"  'backward-word)      ;  Ctrl+left-> backward word

;; Re-mapping Ctrl-Z
(setq ctrl-z-map (make-keymap))
(global-set-key "\C-z" ctrl-z-map)
(global-set-key (kbd "\C-z\C-r") 'rgrep)
(global-set-key "\C-z\C-s" 'tags-apropos)
(global-set-key (kbd "C-z m") 'menu-bar-open)

(global-set-key (kbd "M-g") 'goto-line)

;; * * * Diff regions * * *
;; Select first region and execute diff-region and then select second
;; region and do diff-region-now
(load "~/.emacs.d/lisp/diff_region.el")
(global-set-key (kbd "C-z d") 'diff-region)
(global-set-key (kbd "C-z n") 'diff-region-now)

;; * * * Mouse * * *

;; Enable mouse support for nox emacs
(unless window-system
  (require 'mouse)
  (xterm-mouse-mode t)
  (global-set-key [mouse-4] '(lambda ()
                               (interactive)
                               (scroll-down 2)))
  (global-set-key [mouse-5] '(lambda ()
                               (interactive)
                               (scroll-up 2)))
  ;;  (defun track-mouse (e))
  ;;  (setq mouse-sel-mode t)
  )

;; * * * Copy/Paste * * *

;; Copy whatever is selected into the mac os x buffer...
;; (shell-command-on-region (region-beginning) (region-end) "tmux save-buffer")
(global-set-key (kbd "C-c c")
                '(lambda () (interactive) (shell-command-on-region
                                           (region-beginning) (region-end)
                                           "tmux set-buffer \"`xargs -0 $@`\""))
                )

;; * * * README * * *
(find-file "~/README")
(switch-to-buffer "README")

;; Load cyberpunk theme, install it with M-x package-installer
;; cyberpunk-theme
; (add-hook 'after-init-hook
;           (lambda () (load-theme 'cyberpunk t)))
(custom-set-variables
 ;; custom-set-variables was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
; '(custom-safe-themes
;   (quote
;    ("d1cc05d755d5a21a31bced25bed40f85d8677e69c73ca365628ce8024827c9e3" default)))
 '(package-selected-packages
   (quote
    (cyberpunk-theme edts f erlang auto-highlight-symbol auto-complete))))
;(custom-set-faces
 ;; custom-set-faces was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
; '(region ((t (:background "color-68")))))
