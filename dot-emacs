;; Create etags
;;
;;
(defun generate-etags ()
  (interactive)
  ;; Erlang
  (shell-command "etags --language=erlang -o ${HOME}/TAGS `find ${HOME}/git | grep -E '(\.erl|\.hrl)$' | grep -v '\.eunit'`")
  ;; Java
  (shell-command "etags --language=java -a -o ${HOME}/TAGS `find ${HOME}/git/ | grep -E '\.java$'`")
  )

;; Make sure the TAGS are loaded
(if (file-exists-p "~/TAGS") (visit-tags-table "~/TAGS"))
(setq tags-revert-without-query 1)

;; Auto follow symlinks
(setq vc-follow-symlinks 1) ; default is ask

;; BROKEN Auto complete via buffers
;; (global-set-key [(control return)] 'dabbrev-expand)

;; Set some colors
(set-cursor-color "red")
;(set-foreground-color "black")
;(set-background-color "white")
(set-mouse-color "red")
(add-to-list 'default-frame-alist '(background-color . "grey00"))

;; Highligthing when in marking mode
(transient-mark-mode t)
;; (menu-bar-mode nil)

;; No tabs only spaces
(setq indent-tabs-mode nil)
(setq-default indent-tabs-mode nil)
(setq-default show-trailing-whitespace t)
(setq-default default-indicate-empty-lines t)
;; (setq-default indent-tabs-mode nil)
;; (set-variable default-indicate-empty-lines t)

;; Load various general stuff
(add-to-list 'load-path "~/.emacs.d/")

;; Encrypted files
;(require 'ps-ccrypt)

;; Popup (required by auto complete)
(add-to-list 'load-path "~/.emacs.d/popup-el")
(require 'popup)

;; Load auto complete
(add-to-list 'load-path "~/.emacs.d/auto-complete")

;; Tab complete code expressions
(require 'auto-complete-config)
(add-to-list 'ac-dictionary-directories "~/.emacs.d/auto-complete/dict")
(ac-config-default)
(require 'auto-complete)
(global-auto-complete-mode t)

;; Yasnippet (code snippets to fix autocompletion n' more)
(add-to-list 'load-path "~/.emacs.d/yasnippet")
(require 'yasnippet)
(setq yas/snippet-dirs '("~/.emacs.d/yasnippet/snippets")); add dirs and space between them
(yas-global-mode 1)

;; Flymake
(require 'flymake)

;; Flymake in the status bar
(load-library "flymake-cursor")

;; Handle browsing from emacs, creates a wrapper around w3m and
;; display results in emacs
(setq browse-url-browser-function 'wrap-browser)

(defun wrap-browser (url &rest ignore)
  "Browse URL using w3m."
  (interactive "sURL: ")
  (shell-command (concat "w3m " url))
  (pop-to-buffer "*Shell Command Output*")
  (setq truncate-lines t))

;; * * * Java * * *
;;
;; Builtin Cedet setup, lookin developer menu for more info
(setq semantic-default-submodes '(global-semantic-idle-scheduler-mode
                                  global-semanticdb-minor-mode
                                  global-semantic-idle-summary-mode
                                  global-semantic-mru-bookmark-mode))
(semantic-mode 1)
;; Project is particularly large (more than 1 directory full of files), enable EDE
(global-ede-mode 1)
;; Auto detect project type (Makefile, Scons, CMap...)
(ede-enable-generic-projects)
;; Generic projects are disabled by default, this gives some kind of summary at least...
(global-semantic-idle-summary-mode 1)
;;
;; Maven project stuff
;; (require 'malabar-mode)
;; (setq malabar-groovy-lib-dir "~/.emacs.d/malabar/lib")
;; (add-to-list 'auto-mode-alist '("\\.java\\'" . malabar-mode))
;; ;; Compile on save
;; (add-hook 'malabar-mode-hook
;;           (lambda ()
;;             (add-hook 'after-save-hook 'malabar-compile-file-silently
;;                       nil t)))
;;
;; Java auto completion: http://www.emacswiki.org/emacs/AutoJavaComplete
(add-to-list 'load-path "~/.emacs.d/ajc-java-complete/")
(require 'ajc-java-complete-config)
(add-hook 'java-mode-hook 'ajc-java-complete-mode)
(add-hook 'find-file-hook 'ajc-4-jsp-find-file-hook)
;;
;; Javadoc Help
(autoload 'javadoc-lookup "javadoc-help" "Look up Java class in Javadoc." t)
(autoload 'javadoc-help "javadoc-help" "Open up the Javadoc-help menu." t)
(autoload 'javadoc-set-predefined-urls "javadoc-help" "Set pre-defined urls." t)
(javadoc-set-predefined-urls '("http://docs.oracle.com/javase/7/docs/api/"))
;(global-set-key [(shift f8)] 'javadoc-help)
;;
;; Java flymake
(require 'flymake-mvn)
(add-hook 'java-mode-hook 'flymake-java-mvn-mode-hook)

;; * * * Python * * *
;; Run pyflakes via flymake (auto check code for bad stuff)
;; (when (load "flymake" t)
;;   (defun flymake-pyflakes-init ()
;;     (let* ((temp-file (flymake-init-create-temp-buffer-copy
;;                        'flymake-create-temp-inplace))
;;            (local-file (file-relative-name
;;                         temp-file
;;                         (file-name-directory buffer-file-name))))
;;       (list "pyflakes" (list local-file))))
;;
;;   (add-to-list 'flymake-allowed-file-name-masks
;;                '("\\.py\\'" flymake-pyflakes-init)))
;;
;; (add-hook 'find-file-hook 'flymake-find-file-hook)
;;
(require 'python)

;; * * * Erlang * * *
(add-to-list 'load-path "~/.emacs.d/erlang")
(require 'erlang)

;; edts Erlang Development Tool Suite, after erlang
(add-to-list 'load-path "~/.emacs.d/edts")
(require 'edts-start)

;; (defun flymake-erlang-init ()
;;   (let* ((temp-file (flymake-init-create-temp-buffer-copy
;;                      'flymake-create-temp-inplace))
;;          (local-file (file-relative-name temp-file
;;                                          (file-name-directory buffer-file-name))))
;;     (list "~/.emacs.d/flymaker.escript" (list local-file))))
;;
;; (add-to-list 'flymake-allowed-file-name-masks '("\\.erl$" flymake-erlang-init))

;; (defun my-erlang-mode-hook ()
;;   (interactive)
;; ;  (linum-mode)
;;   (setq truncate-lines t)
;;   (setq truncate-partial-width-windows nil)
;;   (setq erlang-indent-level 2)
;;   (setq case-fold-search t)
;;   (setq whitespace-style       (quote (face tabs lines-tail trailing)))
;;   (setq whitespace-action      nil)
;;   (setq whitespace-line-column 80)
;;   (whitespace-mode)
;;   (erlang-extended-mode t)
;;
;;   (require 'flymaker-el)
;;   (flymake-mode f)
;;
;;   (highlight-todo)
;;   (highlight-parentheses-mode)
;;   (allout-mode))

(setq edts-projects
    '(( ;; My project.
       (name       . "kred")
       (root       . "~/git/klarna/dev")
       (node-sname . "dashi") ; defaults to project name
       (lib-dirs   . ("lib" "test")))))

;; (add-hook 'erlang-mode-hook 'my-erlang-mode-hook)
;; (add-hook 'erlang-mode-hook '(lambda () (setq case-fold-search t)))

(autoload 'erlang-mode "erlang.el" "" t)
(add-to-list 'auto-mode-alist '("\\.[eh]rl$" . erlang-mode))
(add-to-list 'auto-mode-alist '("\\.yaws$" . erlang-mode))
(add-to-list 'auto-mode-alist '(".emacs$" . lisp-mode))
(add-to-list 'auto-mode-alist '("dot-emacs$" . lisp-mode))
;; (add-to-list 'auto-mode-alist '("\\.[eh]rl$" . erlang-extended-mode))
;; (add-to-list 'auto-mode-alist '("\\.yaws$" . erlang-extended-mode))
(add-to-list 'auto-mode-alist '("\\.rst$" . rst-mode))
(customize-set-variable 'rst-level-face-base-color "black")

;; Lookup erlang man pages
(defun get-erl-man ()
  (interactive)
  (let* ((man-path "/usr/lib/erlang/man")
         (man-args (format "-M %s %s" man-path (current-word))))
    (man man-args)))

;; Font locks
(add-hook 'python-mode-hook 'turn-on-font-lock)
(add-hook 'python-hook 'turn-on-font-lock)
(add-hook 'java-mode-hook 'turn-on-font-lock)
(add-hook 'js2-mode-hook 'turn-on-font-lock)

(global-font-lock-mode t)

;; Close all buffers
(defun kill-all-buffers ()
  (interactive)
  (mapc 'kill-buffer (buffer-list)))

;; Pretty print XML
(defun pretty-print-xml-region (begin end)
  "Pretty format XML markup in region. You need to have nxml-mode
http://www.emacswiki.org/cgi-bin/wiki/NxmlMode installed to do
this.  The function inserts linebreaks to separate tags that have
nothing but whitespace between them.  It then indents the markup
by using nxml's indentation rules."
  (interactive "r")
  (save-excursion
    (nxml-mode)
    (goto-char begin)
    (while (search-forward-regexp "\>[ \\t]*\<" nil t)
      (backward-char) (insert "\n"))
    (indent-region begin end))
  (message "Ah, much better!"))

;; Insert a timestamp at the end of a file (diary stuff)
(defun insert-date-stamp ()
  "Insert current date at the end of the file position."
  (interactive "*")
  (message "starting to date stamp the line...")
  (setq make-backup-files         nil)
  (end-of-buffer)
  (end-of-line)
  (insert (format-time-string "\n\n%a %b %e %R %Z %Y\n\n" (current-time)))
  ;;(forward-char -1)
  ;;(forward-char 1)
  (end-of-buffer)
  (end-of-line)
  (message "starting to date stamp the line - finished.")
  )

;; Show line-number in the mode line
(line-number-mode 1)

;; Show column-number in the mode line
(column-number-mode 1)

;; Always save the current session (desktop)
(desktop-save-mode 0)

;; Backwards delete
(global-set-key (kbd "<A-backspace>") 'backward-kill-word)
(global-set-key (kbd "M-g") 'goto-line)

;; Resize window
(global-set-key (kbd "C-x <up>") 'enlarge-window-horizontally)
(global-set-key (kbd "C-x <down>") 'enlarge-window)

(add-to-list 'load-path "~/.emacs.d/mo-git-blame")
(autoload 'mo-git-blame-file "mo-git-blame" nil t)
(autoload 'mo-git-blame-current "mo-git-blame" nil t)

;; Scala
(add-to-list 'load-path "~/.emacs.d/scala-mode2")
(require 'scala-mode)

;; (global-hl-line-mode 1)

;; This lets you do M-zf to find a (grep)regexp in all kred-sources.
;; Then you can use next error to find the match in the code.
;; E.g. ^C-zf -> Find: OCRGIRO_BNO_START ^C-.
(defun kfind-at (path word)
  (grep-find
   (concat "find " path
           (concat " -name '.svn' -prune -o -name '*~' -prune -o -name '*html' -prune -o -type f -print0 | xargs -0 -e grep -nI -e " word))))
(defun kfind (word)
  (interactive "MFind: ")
  (kfind-at
   (concat
    (car (split-string (buffer-file-name) "lib"))
    "lib/")
   word)
  )

;; LOADS OF THESE ARE ACTUALLY BROKEN, CLEAN UP!

;; Shortcuts
(setq ctrl-z-map (make-keymap))
(global-set-key "\C-z" ctrl-z-map)
;; (global-set-key "\C-z\C-f" 'kfind)
(global-set-key "\C-z\C-c" 'compile)
(global-set-key "\C-z\C-m" (lambda() (interactive) (get-erl-man)))
(global-set-key (kbd "<C-return>") 'erl-complete)
(global-set-key "\C-z\C-o" '(lambda () (set-variable case-fold-search t)))
(global-set-key (kbd "C-x j") (kbd "M-w C-s M-y"))

;; Emacs no window mode
(global-set-key (kbd "M-[ A") 'backward-paragraph)
(global-set-key (kbd "M-[ B") 'forward-paragraph)
(global-set-key (kbd "M-[ C") 'forward-word)
(global-set-key (kbd "M-[ D") 'backward-word)

;; (global-set-key (kbd "<C-return>") 'erlang-find-tag)
;; (global-set-key "\C-tab" 'complete-tag)
;; (global-set-key (kbd "M-s") 'tags-apropos)
(global-set-key "\C-z\C-s" 'tags-apropos)
(global-set-key "\C-z\C-a" 'rgrep)
(global-set-key (kbd "C-z m") 'menu-bar-open)

;;(global-set-key (kbd "<A-g>") 'goto-line)
;; (global-set-key [(A-backspace)] 'backward-delete-word

(global-set-key [(control -)] 'dabbrev-expand)

;(global-set-key [(meta O) (a)] 'backward-paragraph)
;(global-set-key [(meta O) (b)] 'forward-paragraph)
;(global-set-key (<C-prior>) 'beginning-of-buffer)

;;(define-key global-map "\e[1~" [chome])
;;(define-key global-map "\e[4~" [cend])
;;(define-key global-map "\033[40~" [chome])
;;(define-key global-map "\033[41~" [cend])
;;(global-set-key [chome] 'beginning-of-buffer)
;;(global-set-key [cend] 'end-of-buffer)
;;(global-set-key [(control home)] 'beginning-of-buffer)
;;(global-set-key [(control end)]  'end-of-buffer)
(global-set-key (kbd "ESC <end>") 'end-of-buffer)
(global-set-key (kbd "ESC <home>") 'beginning-of-buffer)

(global-set-key [kp-delete] 'delete-char)

;; Java
(global-set-key "\C-z\C-d" 'javadoc-lookup)

;; Load general TODO file on startup
(find-file "~/TODO")
(switch-to-buffer "TODO")

;; Make the mac-alt key work as normal. Mac-option becomes the meta key :P
(setq mac-option-key-is-meta nil)
(setq mac-command-key-is-meta t)
(setq mac-command-modifier 'meta)
(setq mac-option-modifier nil)

;; Searching
; (setq case-fold-search nil) ; make searches case sensitive
; (setq case-fold-search t)   ; make searches case insensitive

;; Scroll one line at a time...
;; (setq mouse-wheel-scroll-amount '(1 ((shift) . 1) ((control) . nil)))

;; Better mouse wheel scrolling...not so fast :P
(setq mouse-wheel-progressive-speed nil)
(put 'upcase-region 'disabled nil)

;; 80 chars limit
;; (require 'column-marker)
;; (add-hook 'find-file-hook (lambda () (interactive) (column-marker-3 80)))
;; (global-font-lock-mode t)
;; (setq-default show-trailing-whitespace t)
(custom-set-variables
 ;; custom-set-variables was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 '(safe-local-variable-values (quote ((allout-layout . t) (erlang-indent-level . 2) (erlang-indent-level . 4)))))
(custom-set-faces
 ;; custom-set-faces was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 )
