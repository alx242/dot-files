;; To reload .emacs just do M-x load-file press return twice if it is
;; the current buffer or just open the correct file...

;; Mac OS allow alt-command and make command meta
;; (setq mac-option-modifier nil
;;       ;; mac-command-modifier 'meta
;;       x-select-enable-clipboard t)

;; Access to homebrew commands
(add-to-list 'exec-path "/opt/homebrew/bin/")

;; (setq mac-option-key-is-meta t)
;; (setq mac-option-key-is-meta t)
(setq mac-allow-anti-aliasing nil)
(setq mac-right-option-modifier nil)
(setq mac-command-modifier 'super)
(setq mac-option-modifier 'meta)
(setq x-select-enable-clipboard t)

;; Want to run as a server
(server-start)

;; co-pilot
;; required: brew install nodejs
;; packages: editorconfig (melpa)
;;           jsonrpc (elpa)
;;           dash (melpa)
;;           s (melpa)
;;           f (melpa)
;;
;; after running copilot-login the device activation code will be in
;; the clipboard ready to be posted on the URL page ctrl/cmd-v
(add-to-list 'load-path (expand-file-name "~/.emacs.d/copilot/"))
(require 'copilot)
(setq copilot-max-char 1000000)

;; FIXME: Can't be loaded above markedown?!?!?!
;; packages: request
; (add-to-list 'load-path (expand-file-name "~/.emacs.d/copilot-chat/"))
; (load "~/.emacs.d/copilot-chat/copilot-chat.el")
;; (require 'copilot-chat)

;; save desktop to enable getting back in to action ö_Ö
(desktop-save-mode 1)

(setq fill-column 80)

;; regex re-builder
(require 're-builder)
(setq reb-re-syntax 'string)

;; (setq mac-option-key-is-meta nil
;;      mac-command-key-is-meta t
;;      mac-command-modifier 'meta
;;      mac-option-modifier 'none
;;      x-select-enable-clipboard t

;; Will update the etags file in case we are saving a correct file (or
;; rather we save a file with the correct mode)
;; (add-hook 'after-save-hook (lambda()
;;                              (if (string-equal mode-name "Erlang")
;;                                  (update-etags)
;;                                nil)))
;; (message (concat "No etags update, mode: " mode-name)))))

;; (add-to-list 'custom-theme-load-path (expand-file-name "~/.emacs.d/themes/"))
(setq tags-revert-without-query 1)

;; Force confirmation before exit of emacs
(setq confirm-kill-emacs 'y-or-n-p)

;; * * * Load emacs stuff * * *
(add-to-list 'load-path "~/.emacs.d/lisp")

;; Package handling
(require 'package)
(add-to-list 'package-archives '("elpa" . "http://elpa.gnu.org/packages/") t)
(add-to-list 'package-archives '("melpa" . "https://melpa.org/packages/") t)
(add-to-list 'package-archives '("marmalade" . "http://marmalade-repo.org/packages/") t)
(package-initialize)

;; * * * Moving around window-buffers * * *

;; (global-set-key (kbd "C-t") 'customize-face)
(global-set-key (kbd "C-t") 'customize-themes)
(global-set-key (kbd "C-f") 'menu-set-font)
(windmove-default-keybindings 'super)
(global-set-key (kbd "M-o") 'other-window)
(global-set-key (kbd "M-i") 'previous-window-any-frame)

; (global-set-key (kbd "M-s-<up>") 'windmove-swap-states-up)
; (global-set-key (kbd "M-s-<down>") 'windmove-swap-states-down)
; (global-set-key (kbd "M-s-<left>") 'windmove-swap-states-left)
; (global-set-key (kbd "M-s-<right>") 'windmove-swap-states-right)

(global-set-key (kbd "M-s-<left>") 'shrink-window-horizontally)
(global-set-key (kbd "M-s-<right>") 'enlarge-window-horizontally)
(global-set-key (kbd "M-s-<down>") 'shrink-window)
(global-set-key (kbd "M-s-<up>") 'enlarge-window)

(global-set-key (kbd "s-0") 'delete-window)
(global-set-key (kbd "s-1") 'delete-other-windows)
(global-set-key (kbd "s-2") 'split-window-below)
(global-set-key (kbd "s-3") 'split-window-right)

(require 'transpose-frame)
(global-set-key (kbd "s-k") 'kill-buffer)
(global-set-key (kbd "s-b") 'switch-to-buffer)
(global-set-key (kbd "s-.") 'maximize-window)
(global-set-key (kbd "s-,") 'balance-windows)
(global-set-key (kbd "s-r") 'rotate-frame-clockwise)

;; ‘transpose-frame’ Swap x-direction and y-direction
;;
;;        +------------+------------+      +----------------+--------+
;;        |            |     B      |      |        A       |        |
;;        |     A      +------------+      |                |        |
;;        |            |     C      |  =>  +--------+-------+   D    |
;;        +------------+------------+      |   B    |   C   |        |
;;        |            D            |      |        |       |        |
;;        +-------------------------+      +--------+-------+--------+
;; ‘flip-frame’ Flip vertically
;;
;;        +------------+------------+      +------------+------------+
;;        |            |     B      |      |            D            |
;;        |     A      +------------+      +------------+------------+
;;        |            |     C      |  =>  |            |     C      |
;;        +------------+------------+      |     A      +------------+
;;        |            D            |      |            |     B      |
;;        +-------------------------+      +------------+------------+
;; ‘flop-frame’ Flop horizontally
;;
;;        +------------+------------+      +------------+------------+
;;        |            |     B      |      |     B      |            |
;;        |     A      +------------+      +------------+     A      |
;;        |            |     C      |  =>  |     C      |            |
;;        +------------+------------+      +------------+------------+
;;        |            D            |      |            D            |
;;        +-------------------------+      +-------------------------+
;; ‘rotate-frame’ Rotate 180 degrees
;;
;;        +------------+------------+      +-------------------------+
;;        |            |     B      |      |            D            |
;;        |     A      +------------+      +------------+------------+
;;        |            |     C      |  =>  |     C      |            |
;;        +------------+------------+      +------------+     A      |
;;        |            D            |      |     B      |            |
;;        +-------------------------+      +------------+------------+
;; ‘rotate-frame-clockwise’ Rotate 90 degrees clockwise
;;
;;        +------------+------------+      +-------+-----------------+
;;        |            |     B      |      |       |        A        |
;;        |     A      +------------+      |       |                 |
;;        |            |     C      |  =>  |   D   +--------+--------+
;;        +------------+------------+      |       |   C    |   B    |
;;        |            D            |      |       |        |        |
;;        +-------------------------+      +-------+--------+--------+
;; ‘rotate-frame-anti-clockwise’ Rotate 90 degrees anti-clockwise
;;
;;        +------------+------------+      +--------+--------+-------+
;;        |            |     B      |      |   B    |   C    |       |
;;        |     A      +------------+      |        |        |       |
;;        |            |     C      |  =>  +--------+--------+   D   |
;;        +------------+------------+      |        A        |       |
;;        |            D            |      |                 |       |
;;        +-------------------------+      +-----------------+-------+

;; (global-set-key (kbd "C-P") 'enlarge-window)
;; (global-set-key (kbd "C-N") 'shrink-window)

;; when cursor is on edge, move to the other side, as in a toroidal space
(setq windmove-wrap-around t)

(global-set-key (kbd "S-C-<left>") 'shrink-window-horizontally)
(global-set-key (kbd "S-C-<right>") 'enlarge-window-horizontally)
(global-set-key (kbd "S-C-<down>") 'shrink-window)
(global-set-key (kbd "S-C-<up>") 'enlarge-window)

;; * * * General variables * * *
;; No tabs only spaces
(setq indent-tabs-mode nil)
(setq-default indent-tabs-mode nil)
(setq-default show-trailing-whitespace t)
(setq-default default-indicate-empty-lines t)
(setq-default line-number-mode t)
(setq-default column-number-mode t)
(setq vc-follow-symlinks t) ; Auto follow symlinks

(setq max-lisp-eval-depth 600)

;; Scrolling
(setq redisplay-dont-pause t
  scroll-margin 1
  scroll-step 1
  scroll-conservatively 10000
  scroll-preserve-screen-position 1)

(setq jit-lock-defer-time 0.05)
;; (setq jit-lock-defer-time 0)
(setq fast-but-imprecise-scrolling t)

;; * * * Interactively Do Things * * *
(require 'ido)
(ido-mode t)

;; * * * Encrypted files * * *
(require 'ps-ccrypt)

;; * * * Markdown * * *
(load "~/.emacs.d/markdown-mode/markdown-mode.el")
(add-to-list 'auto-mode-alist '("README$" . markdown-mode))
(add-to-list 'auto-mode-alist '("\\.mdp$" . markdown-mode))

;; * * * Yang * * *
(autoload 'yang-mode "yang-mode" "Major mode for editing YANG modules." t)
(add-to-list 'auto-mode-alist '("\\.yang$" . yang-mode))
;; To not make emacs laggy when viewing big yang-files
(setq-default blink-matching-paren-distance nil)
;; (setq-default fast-but-imprecise-scrolling t)

;; * * * LuX * * *
(require 'lux-mode)

;; * * * 80 colums * * *
(require 'column-marker)

;; * * * Erlang * * *
;; Try and get a working erlang environment
(setenv "ERL_COMPILER_OPTIONS" "[debug_info]")
(setenv "ERL_NO_FAIL_ON_WARNING" "true")

(require 'grep)
(load "~/.emacs.d/erl-find-source/erl-find-source.el")

(defun my-erlang-mode-hook ()
  "Configuration for Erlang Mode. Add this to `erlang-mode-hook'."
  (setq indent-tabs-mode nil)
  ;; I use M-. to push to stack (default), and M-* to pop from stack
  (local-set-key "\e." 'erlfs-find-source-under-point)
  ;; (local-set-key "\e*" 'erlfs-find-source-unwind))
  ;; Some prefer M-, for pop
  (local-set-key "\e," 'erlfs-find-source-unwind)
  ;;(local-set-key "\e?" 'erlfs-alt-find-callers)
  (local-set-key "\e?" 'erlfs-find-callers)
  ;; Activate the co-pilot
  (copilot-mode)
  ;; 80 chars
  (display-fill-column-indicator-mode)
  (set-fill-column 80)
  )
;;;
(add-hook 'erlang-mode-hook 'my-erlang-mode-hook)

(add-to-list 'auto-mode-alist '("rebar\\.config$" . erlang-mode))
(add-to-list 'auto-mode-alist '("relx\\.config$" . erlang-mode))
(add-to-list 'auto-mode-alist '("system\\.config$" . erlang-mode))
(add-to-list 'auto-mode-alist '("\\.app\\.src$" . erlang-mode))

(setq load-path (cons  "~/.emacs.d/emacs" load-path))

;; * * * XML * * *
(defun pretty-print-xml-region (begin end)
  "Pretty format XML markup in region. You need to have nxml-mode
http://www.emacswiki.org/cgi-bin/wiki/NxmlMode installed to do
this.  The function inserts linebreaks to separate tags that have
nothing but whitespace between them.  It then indents the markup
by using nxml's indentation rules."
  (interactive "r")
  (save-excursion
    (nxml-mode)
    (goto-char begin)
    (while (search-forward-regexp "\>[ \\t]*\<" nil t)
      (backward-char) (insert "\n"))
    (indent-region begin end))
  (message "Ah, much better!"))

;; * * * (e)Lisp * * *
(add-to-list 'auto-mode-alist '("\\.emacs$" . lisp-mode))
(add-to-list 'auto-mode-alist '("dot-emacs$" . lisp-mode))

;; * * * Rst * * *
(add-to-list 'auto-mode-alist '("\\.rst$" . rst-mode))


;; * * * Internal functions * * *
;; Auto-complete using open buffers
(defun indent-or-complete ()
  "Complete if point is at end of a word, otherwise indent line."
  (interactive)
  (if (looking-at "\\>")
      (or (copilot-accept-completion)
          (dabbrev-expand nil))
      (indent-for-tab-command)))

(global-set-key (kbd "TAB") 'indent-or-complete)
(global-set-key (kbd "C-<tab>") 'copilot-accept-completion)
(global-set-key (kbd "<backtab>") 'copilot-next-completion)
; (global-set-key (kbd "<backtab>") 'copilot-previous-completion)

;; Insert a timestamp at the end of a file (diary stuff)
(defun insert-date-stamp ()
  "Insert current date at the end of the file position."
  (interactive "*")
  (message "starting to date stamp the line...")
  (setq make-backup-files nil)
  (end-of-buffer)
  (end-of-line)
  (insert (format-time-string "\n\n%a %b %e %R %Z %Y\n\n" (current-time)))
  ;;(forward-char -1)
  ;;(forward-char 1)
  (end-of-buffer)
  (end-of-line)
  (message "starting to date stamp the line - finished.")
  )

;; Kill all buffers
(defun kill-all-buffers ()
  "Kill all buffers in emacs...wooops"
  (interactive)
  (mapcar 'kill-buffer (buffer-list))
  (delete-other-windows))

;; vterm
;; (global-set-key (kbd "C-x t") 'new-terminal)

;; (defun multi-vterm-home ()
;;   (interactive)
;;   (let ((default-directory "~"))
;;     (multi-vterm))
;;   (dedicate-window)
;;   )

;; (defun dedicate-window (&optional arg)
;;   "Set current window to be dedicated.
;;    With prefix ARG, undedicate it."
;;   (interactive "P")
;;   (set-window-dedicated-p (get-buffer-window (current-buffer)) (not arg))
;;   (message (if arg
;;                "Window '%s' is normal"
;;                "Window '%s' is dedicated")
;;            (current-buffer)))

;; (global-set-key (kbd "s-t") 'multi-vterm-home)
;; (global-set-key (kbd "s-n") 'multi-vterm-next)
;; (global-set-key (kbd "s-p") 'multi-vterm-prev)
;; (global-set-key (kbd "s-c") 'vterm-copy-mode)

;; (global-set-key (kbd "s-k") '(lambda ()
;;                               (interactive)
;;                               (vterm-clear)
;;                               (vterm-clear-scrollback)))

;; (defun vterm-send-C-k ()
;;   "Send `C-k' to libvterm."
;;   (interactive)
;;   (kill-ring-save (point) (vterm-end-of-line))
;;   (vterm-send-key "k" nil nil t))

;; (setq vterm-kill-buffer-on-exit t)
;; (setq vterm-max-scrollback 10000)
;; (setq vterm-enable-manipulate-selection-data-by-osc52 t)

(global-set-key (kbd "s-n") 'next-buffer)
(global-set-key (kbd "s-p") 'previous-buffer)

;;(defun my-vterm-mode-customizations ()
;;  (local-set-key (kbd "C-k") 'vterm-send-C-k))

;;(add-hook 'vterm-mode-hook 'my-vterm-mode-customizations)

;; * * * Keys * * *

;; Word-walk
;;
;; In apple terminal add the ctrl-up and ctrl-down by using \033[1;5A
;; and \033[1;5B (\033 is Meta/Esc) as well as ctrl-left/right. Make
;; sure the standard shortcuts doesn't catch these...
;;
;; C-h k and then press a key to get current description

(global-set-key (kbd "M-c") 'compile)
(global-set-key (kbd "M-[ A") 'backward-paragraph) ; Meta+up
(global-set-key (kbd "M-[ B") 'forward-paragraph)  ; Meta+down
(global-set-key (kbd "ESC <up>") 'backward-paragraph) ; Meta+up
(global-set-key (kbd "ESC <down>") 'forward-paragraph)  ; Meta+down
(global-set-key (kbd "M-[ C") 'forward-word)       ; Meta+down
(global-set-key (kbd "M-[ D") 'backward-word)      ; Meta+up

(global-set-key (kbd "M-p") 'backward-paragraph) ; Meta+p
(global-set-key (kbd "M-n") 'forward-paragraph)  ; Meta+n

(global-set-key (kbd "M-<down>") 'forward-paragraph)
(global-set-key (kbd "M-<up>") 'backward-paragraph)
(global-set-key (kbd "M-<left>") 'backward-word)
(global-set-key (kbd "M-<right>") 'forward-word)

;; Re-mapping Ctrl-Z
(setq ctrl-z-map (make-keymap))
(global-set-key "\C-z" ctrl-z-map)
;;(global-set-key (kbd "\C-z\C-r") 'rgrep)
(global-set-key (kbd "\C-z\C-r") 'rgrep)
(global-set-key "\C-z\C-s" 'tags-apropos)
(global-set-key (kbd "C-z m") 'menu-bar-open)
(global-set-key "\C-c\C-f" 'erlang-beginning-of-clause)
(global-set-key (kbd "\C-c\C-e") 'erlang-next-error)

(global-set-key (kbd "M-g") 'goto-line)

;; * * * Diff regions * * *
;; Select first region and execute diff-region and then select second
;; region and do diff-region-now
(load "~/.emacs.d/lisp/diff_region.el")
(global-set-key (kbd "C-z d") 'diff-region)
(global-set-key (kbd "C-z n") 'diff-region-now)

;; * * * Mouse * * *

;; Enable mouse support for nox emacs
(unless window-system
  (require 'mouse)
  (xterm-mouse-mode t)
  (global-set-key [mouse-4] '(lambda ()
                              (interactive)
                              (scroll-down 1)))
  (global-set-key [mouse-5] '(lambda ()
                              (interactive)
                              (scroll-up 1)))
  ;;  (defun track-mouse (e))
  ;;  (setq mouse-sel-mode t)
  )

;; * * * Copy/Paste * * *

;; Copy whatever is selected into the mac os x buffer...
(defun copy-from-osx ()
  (shell-command-to-string "pbpaste"))

(defun paste-to-osx (text &optional push)
  (let ((process-connection-type nil))
    (let ((proc (start-process "pbcopy" "*Messages*" "pbcopy")))
      (process-send-string proc text)
      (process-send-eof proc))))

;; injects the above functions to make sure command-v / c works as intended :)
(if (eq system-type 'darwin)
    (lambda()
      (setq interprogram-cut-function 'paste-to-osx)
      (setq interprogram-paste-function 'copy-from-osx)
      )
    )

;; Stop sounding the bell in emacs
(setq ring-bell-function 'ignore)

;; (grep-apply-setting 'grep-find-template
;;                     "rg -uu -g <F> <R> <D>")
;;(grep-apply-setting 'grep-find-template
;; "find <D> <X> -type f <F> -exec rg <C> --no-heading -H  <R> /dev/null {} +")

;; (grep-apply-setting 'grep-template "rg --no-heading -H -uu -g <F> <R> <D>")

;; * * * README * * *
(find-file "~/README")
(switch-to-buffer "README")

(custom-set-variables
 ;; custom-set-variables was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 '(column-number-mode t)
 '(custom-enabled-themes '(nord))
 '(custom-safe-themes
   '("ee0785c299c1d228ed30cf278aab82cf1fa05a2dc122e425044e758203f097d2" "b5b6396361db4bee9b0c0d7ea678b96b3b55e4217c610038c8d289eb05c426ef" "aa742450bc84284415b398be20bfe1c7e63b58fbbc4beb4f2709ce08f2ca3c92" "7c7026a406042e060bce2b56c77d715c3a4e608c31579d336cb825b09e60e827" "ea5a840bd2f9616a36890c27fd5e97528cb9fcfafa0e6739315bb12786d6c4ee" "f5a7e07642decb17b03483af7c44e93353d2b128de403bf301651954c628c0ab" "e7ce09ff7426c9a290d06531edc4934dd05d9ea29713f9aabff834217dbb08e4" "e28246005845509308f992e6fa8524249e13b65192572c9cc9f412a4c5150373" "d6e59d5d3e1e4ec825322deed1e154251abecff0b2bb6d32ac62b117f623bd50" "125744c0b04c7addbe25d238a4053740fad2ad5e18211662f637dbacb3802331" "15a4c95b442e6e7ef3b4e17f792f3c5b2a96e3f64589ae280dad648d97a64e5a" "1d609285d297920b97b0d230360a8d7c3f930edcf1abe96a1d82356f9a5e228d" "46f5e010e0118cc5aaea1749cc6a15be4dfce27c0a195a0dff40684e2381cf87" "00b463c48742afe509ae7d1dcfce09471f7203e13a118f1256b208017a978b4e" "d1cbc62377e87ed73d97af40bf2bff23033bb29c44cc9f15ecbbcbb53fc88095" "e1befaab4edb07028d6502c8feff0fbfc4c90c8f192d00ca6732f7fc0e80d119" "b5dd9b010ba8ac35e18f25be917f1e2dfa5f391784e54848a8853ae000996337" "1a10896643cce14633f9e2b9f3727761cc528ee7bbbe7e8efeb442e067da1a96" "0d09f49e81c811f4a661ff63b82d2b812ce034aed336903922b06362b8cb0bbe" "3d4df186126c347e002c8366d32016948068d2e9198c496093a96775cc3b3eaa" "919fabfc5cb6165ce07b9d8668f78fe75fe8bd08566006bc87513c29b4f34ade" "c0f4b66aa26aa3fded1cbefe50184a08f5132756523b640f68f3e54fd5f584bd" "957a573d5c7cb49c2f033b9d5a6f77445c782307e2d7ffca0d9b5b8141c49843" "9b4ae6aa7581d529e20e5e503208316c5ef4c7005be49fdb06e5d07160b67adc" "edf6b2f1ff26f0cb155523bd4b83a82f1f19a42c9c77fcec0ebbc796d8931180" "83e0376b5df8d6a3fbdfffb9fb0e8cf41a11799d9471293a810deb7586c131e6" "6bdcff29f32f85a2d99f48377d6bfa362768e86189656f63adbf715ac5c1340b" "78c4238956c3000f977300c8a079a3a8a8d4d9fee2e68bad91123b58a4aa8588" "7661b762556018a44a29477b84757994d8386d6edee909409fabe0631952dad9" "6b5c518d1c250a8ce17463b7e435e9e20faa84f3f7defba8b579d4f5925f60c1" "d14f3df28603e9517eb8fb7518b662d653b25b26e83bd8e129acea042b774298" "0ed3d96a506b89c1029a1ed904b11b5adcebeb2e0c16098c99c0ad95cb124729" "b6c43bb2aea78890cf6bd4a970e6e0277d2daf0075272817ea8bb53f9c6a7f0a" "91c008faf603a28d026957120a5a924a3c8fff0e12331abf5e04c0e9dd310c65" "bffa9739ce0752a37d9b1eee78fc00ba159748f50dc328af4be661484848e476" "fa2b58bb98b62c3b8cf3b6f02f058ef7827a8e497125de0254f56e373abee088" "68bda5909fa46ce2fa510108d4abfafb75671f721dcad05211d3f78fec8a918a" "d677ef584c6dfc0697901a44b885cc18e206f05114c8a3b7fde674fce6180879" "8aebf25556399b58091e533e455dd50a6a9cba958cc4ebb0aab175863c25b9a4" "e16a771a13a202ee6e276d06098bc77f008b73bbac4d526f160faa2d76c1dd0e" "4eb6fa2ee436e943b168a0cd8eab11afc0752aebb5d974bba2b2ddc8910fca8f" "117efd35bd4451a2d4ee0180cb2dbfc8601af5c4d9ade3ea575d2afdda0feb82" "81c3de64d684e23455236abde277cda4b66509ef2c28f66e059aa925b8b12534" "5a27cbf4736a5f9be00c35f4961efd29ea72f7e959f856e0ab31051547ce4f29" "b89a4f5916c29a235d0600ad5a0849b1c50fab16c2c518e1d98f0412367e7f97" default))
 '(debug-on-error t)
 '(package-selected-packages
   '(request compat magit f dash s editorconfig jsonrpc autumn-light-theme tangotango-theme transpose-frame dired-sidebar dired-subtree color-theme-approximate aircon-theme undersea-theme white-sand-theme white-theme dream-theme nordless-theme nordic-night-theme nord-theme dakrone-light-theme cyanometric-theme cloud-theme boron-theme underwater-theme tron-legacy-theme melancholy-theme adwaita-dark-theme vampyricdark-theme atom-dark-theme ancient-one-dark-theme zerodark-theme graphviz-dot-mode afternoon-theme acme-theme abyss-theme ample-theme spacemacs-theme yang-mode rust-mode nyan-mode gruvbox-theme gotham-theme erlang dracula-theme cyberpunk-theme))
 '(safe-local-variable-values '((allout-layout . t) (sh-indent-comment . t)))
 '(scroll-bar-mode nil))

;; (set-mouse-color "white")

(setq my_font "unscii-16:antialias=false:hinting=true:autohint=false")
(set-face-attribute 'default nil :font my_font)
(set-face-attribute 'fixed-pitch nil :font my_font)
(set-face-attribute 'variable-pitch nil :font my_font)
(set-face-attribute 'tab-bar nil :font my_font)
(set-face-attribute 'help-key-binding nil :font my_font)
(set-face-attribute 'help-for-help-header nil :font my_font)
(set-face-attribute 'fixed-pitch-serif nil :font my_font)


(custom-set-faces
 ;; custom-set-faces was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 )
