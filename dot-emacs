;; * * * TAGS * * *
(defun generate-etags ()
  (interactive)
  ;; Erlang
  (shell-command "etags --language=erlang -o ${HOME}/TAGS
                  `find ${ERLANG_DIRS} -iregex '.*.erl$' -o -iregex '.*hrl$' | grep -v '\.eunit'`")
  ;; Python
  ;; (shell-command "etags -a --language=python -o ${HOME}/TAGS `find ${PYTHON_DIRS} | grep -E '(\.py)$'`")
  )

;; Make sure the TAGS are loaded
(if (file-exists-p "~/TAGS") (visit-tags-table "~/TAGS"))
(setq tags-revert-without-query 1)

;; * * * Load emacs stuff * * *
(add-to-list 'load-path "~/.emacs.d/lisp")

;; Package handling
(setq package-archives '(("elpa" . "http://elpa.gnu.org/packages/")
                         ("marmalade" . "http://marmalade-repo.org/packages/")
                         ("melpa" . "http://melpa.milkbox.net/packages/")))

;; * * * Moving around window-buffers * * *
;; Non-default binding which doesn't screw up that much...
(global-set-key (kbd "C-x <right>") 'windmove-right)
(global-set-key (kbd "C-x <left>") 'windmove-left)
(global-set-key (kbd "C-x <up>") 'windmove-up)
(global-set-key (kbd "C-x <down>") 'windmove-down)
;; when cursor is on edge, move to the other side, as in a toroidal space
(setq windmove-wrap-around t)

;; * * * General variables * * *
;; No tabs only spaces
(setq indent-tabs-mode nil)
(setq-default indent-tabs-mode nil)
(setq-default show-trailing-whitespace t)
(setq-default default-indicate-empty-lines t)
(setq-default line-number-mode t)
(setq-default column-number-mode t)
(setq vc-follow-symlinks t) ; Auto follow symlinks

;; * * * Interactively Do Things * * *
(require 'ido)
(ido-mode t)

;; * * * Encrypted files * * *
(require 'ps-ccrypt)

;; * * * Magit - git handler * * *
(add-to-list 'load-path "~/.emacs.d/cl-lib")
(add-to-list 'load-path "~/.emacs.d/git-modes")
(add-to-list 'load-path "~/.emacs.d/magit")
(eval-after-load 'info
  '(progn (info-initialize)
          (add-to-list 'Info-directory-list "~/.emacs.d/magit")))
(require 'magit)
(require 'magit-blame)

;; * * * Yang * * *
(autoload 'yang-mode "yang-mode" "Major mode for editing YANG modules." t)
(add-to-list 'auto-mode-alist '("\\.yang$" . yang-mode))

;; * * * LuX * * *
(require 'lux-mode)

;; * * * 80 colums * * *
(require 'column-marker)

;; * * * Erlang * * *
(add-to-list 'load-path "~/.emacs.d/erlang")
(add-to-list 'load-path "~/.emacs.d/edts")

(setq load-path (cons  "~/.emacs.d/emacs" load-path))
;; (setq erlang-root-dir "/usr/local/opt/erlang")
;; (setq exec-path (cons "/usr/local/opt/erlang/bin" exec-path))
;; (setq edts-man-root "~/.emacs.d/edts/doc/R16B03")
(require 'erlang-start)
(add-to-list 'load-path "~/.emacs.d/wrangler/elisp")

(add-hook 'after-init-hook 'my-after-init-hook)
(defun my-after-init-hook ()
  ;; Erlang ide-mode wrangler or edts, edts is default
  (if (string= (getenv "ERL_IDE") "wrangler")
      (require 'wrangler)
    (progn (require 'edts-start)
           (require 'edts-refactor))
    )
  )

(add-hook 'erlang-mode-hook (lambda () (interactive) (column-marker-1 80)))

;; * * * XML * * *
(defun pretty-print-xml-region (begin end)
  "Pretty format XML markup in region. You need to have nxml-mode
http://www.emacswiki.org/cgi-bin/wiki/NxmlMode installed to do
this.  The function inserts linebreaks to separate tags that have
nothing but whitespace between them.  It then indents the markup
by using nxml's indentation rules."
  (interactive "r")
  (save-excursion
    (nxml-mode)
    (goto-char begin)
    (while (search-forward-regexp "\>[ \\t]*\<" nil t)
      (backward-char) (insert "\n"))
    (indent-region begin end))
  (message "Ah, much better!"))

;; * * * (e)Lisp * * *
(add-to-list 'auto-mode-alist '("\\.emacs$" . lisp-mode))
(add-to-list 'auto-mode-alist '("dot-emacs$" . lisp-mode))

;; * * * Rst * * *
(add-to-list 'auto-mode-alist '("\\.rst$" . rst-mode))

;; * * * Internal functions * * *
;; Auto-complete using open buffers
(defun indent-or-complete ()
  "Complete if point is at end of a word, otherwise indent line."
  (interactive)
  (if (looking-at "\\>")
      (dabbrev-expand nil)
    (indent-for-tab-command)
    ))
(global-set-key (kbd "TAB") 'indent-or-complete)

;; Close all buffers
(defun kill-all-buffers ()
  (interactive)
  (mapc 'kill-buffer (buffer-list)))

;; Insert a timestamp at the end of a file (diary stuff)
(defun insert-date-stamp ()
  "Insert current date at the end of the file position."
  (interactive "*")
  (message "starting to date stamp the line...")
  (setq make-backup-files         nil)
  (end-of-buffer)
  (end-of-line)
  (insert (format-time-string "\n\n%a %b %e %R %Z %Y\n\n" (current-time)))
  ;;(forward-char -1)
  ;;(forward-char 1)
  (end-of-buffer)
  (end-of-line)
  (message "starting to date stamp the line - finished.")
  )

;; * * * Keys * * *

;; Word-walk
;;
;; In apple terminal add the alt-up and alt-down by using \033[1;5A
;; and \033[1;5B (\033 is Meta/Esc)
;;
(global-set-key (kbd "M-[ A") 'backward-paragraph) ; Alt+up
(global-set-key (kbd "M-[ B") 'forward-paragraph)  ; Alt+down
;; (global-set-key (kbd "M-[ C") 'forward-word)       ; Alt+right
;; (global-set-key (kbd "M-[ D") 'backward-word)      ; Alt+left

;; (global-set-key "\M-[1;5C" 'forward-word)       ;  Ctrl+right->forward word
;; (global-set-key "\M-[1;5D" 'backward-word)      ;  Ctrl+left-> backward word

;; Re-mapping Ctrl-Z
(setq ctrl-z-map (make-keymap))
(global-set-key "\C-z" ctrl-z-map)
(global-set-key (kbd "\C-z\C-r") 'rgrep)
(global-set-key "\C-z\C-s" 'tags-apropos)
(global-set-key (kbd "C-z m") 'menu-bar-open)

(global-set-key (kbd "M-g") 'goto-line)

;; * * * Diff regions * * *
;; Select first region and execute diff-region and then select second
;; region and do diff-region-now
(load "~/.emacs.d/lisp/diff_region.el")
(global-set-key (kbd "C-z d") 'diff-region)
(global-set-key (kbd "C-z n") 'diff-region-now)

;; * * * Mouse * * *

;; Enable mouse support for nox emacs
(unless window-system
  (require 'mouse)
  (xterm-mouse-mode t)
  (global-set-key [mouse-4] '(lambda ()
                               (interactive)
                               (scroll-down 1)))
  (global-set-key [mouse-5] '(lambda ()
                               (interactive)
                               (scroll-up 1)))
  (defun track-mouse (e))
  (setq mouse-sel-mode t)
)

;; * * * Copy/Paste * * *

;; Copy whatever is selected into the mac os x buffer...
;; (shell-command-on-region (region-beginning) (region-end) "/usr/bin/pbcopy")
(global-set-key (kbd "C-c c") 'pbcopy)

(defun pbcopy ()
  (interactive)
  (call-process-region (point) (mark) "pbcopy")
  (setq deactivate-mark t))

;; * * * README * * *
(find-file "~/README")
(switch-to-buffer "README")

(custom-set-variables
 ;; custom-set-variables was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 '(edts-inhibit-package-check t)
 '(ediff-split-window-function (quote split-window-horizontally))

 )

(custom-set-faces
 ;; custom-set-faces was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 '(edts-face-error-line ((t (:background "red"))))
 '(edts-face-warning-line ((t (:background "tomato"))))
 )
